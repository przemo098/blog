{"version":3,"sources":["TodoList/gun.svg","TodoList/cancel.svg","logo.svg","serviceBus.ts","App.tsx","TodoForm/TodoForm.tsx","TodoList/TodoList.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","TodoEventEnum","ServiceBus","Object","classCallCheck","this","serviceBusDomId","serviceBusDomElement","document","getElementById","htmlElement","createElement","setAttribute","body","appendChild","event","action","addEventListener","eventType","data","CustomEvent","detail","bubbles","dispatchEvent","TodoForm","props","_this","possibleConstructorReturn","getPrototypeOf","call","eventBus","inputElement","current","focus","_this2","react_default","a","className","onSubmit","e","preventDefault","AddItem","currentItem","placeholder","ref","value","text","onChange","handleInput","type","Component","TodoList","createTasks","item","key","src","require","onClick","DeleteItem","listItems","entries","map","App","serviceBus","React","target","Date","now","setState","addItem","newItem","state","items","concat","toConsumableArray","deleteItem","filteredItems","filter","subcribeTo","react","src_TodoForm_TodoForm","src_TodoList_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fbfc3af5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gun.125549ee.svg\";","module.exports = __webpack_public_path__ + \"static/media/cancel.35a6ccb5.svg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default class ServiceBus {\n  private readonly serviceBusDomId = \"serviceBus\";\n  private serviceBusDomElement: HTMLElement;\n\n  constructor() {\n    this.serviceBusDomElement = document.getElementById(\n      this.serviceBusDomId\n    ) as HTMLElement;\n    if (!this.serviceBusDomElement) {\n      let htmlElement = document.createElement(this.serviceBusDomId);\n      htmlElement.setAttribute(\"id\", this.serviceBusDomId);\n      this.serviceBusDomElement = document.body.appendChild(htmlElement);\n    }\n  }\n\n  subcribeTo(event: TodoEventEnum, action: (event: CustomEvent) => void) {\n    this.serviceBusDomElement.addEventListener(TodoEventEnum[event], action as EventListener);\n  }\n\n  dispatchEvent(eventType: TodoEventEnum, data: ITodoItem) {\n    let event = new CustomEvent(TodoEventEnum[eventType], {\n      detail: data,\n      bubbles: false\n    });\n    this.serviceBusDomElement.dispatchEvent(event);\n  }\n}\n\nexport enum TodoEventEnum {\n  AddItem,\n  DeleteItem\n}\n\nexport interface ITodoItem {\n  key: number;\n  text: string;\n}\n","import * as React from \"react\";\nimport { Component } from \"react\";\nimport \"./App.scss\";\nimport TodoForm from \"./TodoForm/TodoForm\";\nimport TodoList from \"./TodoList/TodoList\";\nimport ServiceBus from \"./serviceBus\";\n\ninterface IAppState {\n  items: Array<ITodoItem>;\n  currentItem: ITodoItem;\n}\n\nclass App extends Component<any, IAppState> {\n  serviceBus: ServiceBus;\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      items: [],\n      currentItem: { text: \"\", key: Date.now() }\n    };\n    this.serviceBus = new ServiceBus();\n    this.serviceBus.subcribeTo(TodoEventEnum.AddItem, () => this.addItem());\n    this.serviceBus.subcribeTo(TodoEventEnum.DeleteItem, (item: CustomEvent<ITodoItem>) => this.deleteItem(item.detail));\n  }\n  inputElement: any = React.createRef();\n  handleInput = (e: any) => {\n    const itemText = e.target.value;\n    const currentItem = { text: itemText, key: Date.now() };\n    this.setState({\n      currentItem\n    });\n  };\n\n  addItem = (): void => {\n    const newItem = this.state.currentItem;\n    if (newItem.text !== \"\") {\n      const items = [...this.state.items, newItem];\n      this.setState({\n        items: items,\n        currentItem: { text: \"\", key: Date.now() }\n      });\n    }\n  };\n\n  deleteItem = (item: ITodoItem) => {\n    const filteredItems = this.state.items.filter(item => {\n      return item.key !== item.key;\n    });\n    this.setState({\n      items: filteredItems\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <img src={require(\"./logo.svg\")} className=\"logo\" />\n        <div className=\"d-flex justify-content-center\">\n          <div className=\"d-flex justify-content-center todos\">\n            <div className=\"d-flex flex-column todo-list\">\n              <div>\n                <TodoForm\n                  addItem={this.addItem}\n                  inputElement={this.inputElement}\n                  handleInput={this.handleInput}\n                  currentItem={this.state.currentItem}\n                />\n                <TodoList\n                  entries={this.state.items}\n                  deleteItem={this.deleteItem}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\nexport enum TodoEventEnum {\n  AddItem,\n  DeleteItem\n}\n\nexport interface ITodoItem {\n  key: number;\n  text: string;\n}\n","import React, { Component } from \"react\";\r\nimport ServiceBus, { ITodoItem, TodoEventEnum } from \"../serviceBus\";\r\n\r\ninterface ITodoFormProps {\r\n  inputElement: any;\r\n  addItem: (e: React.FormEvent) => void;\r\n  handleInput: (e: React.ChangeEvent) => void;\r\n  currentItem: ITodoItem;\r\n}\r\n\r\nclass TodoForm extends Component<ITodoFormProps, any> {\r\n  eventBus: ServiceBus;\r\n  /**\r\n   *\r\n   */\r\n  constructor(props: any) {\r\n    super(props);\r\n    this.eventBus = new ServiceBus();    \r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.props.inputElement.current.focus();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"todoList\">\r\n        <div className=\"header\">\r\n          <form\r\n            onSubmit={e => {\r\n              e.preventDefault();\r\n              this.eventBus.dispatchEvent(\r\n                TodoEventEnum.AddItem,\r\n                this.props.currentItem\r\n              );\r\n            }}\r\n          >\r\n            <div className=\"input-group input-group-sm mb-3\">\r\n              <div className=\"input-group-prepend\">\r\n                <input\r\n                  className=\"form-control\"\r\n                  placeholder=\"Task\"\r\n                  ref={this.props.inputElement}\r\n                  value={this.props.currentItem.text}\r\n                  onChange={this.props.handleInput}\r\n                />\r\n              </div>\r\n\r\n              <button type=\"submit\" className=\"btn btn-primary\">\r\n                {\" \"}\r\n                Add Task{\" \"}\r\n              </button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TodoForm;\r\n","import \"./TodoList.scss\";\nimport React, { Component } from \"react\";\nimport { ITodoItem } from \"../App\";\nimport ServiceBus, { TodoEventEnum } from \"../serviceBus\";\n// import { ITodoItem } from \"../../../shared/todoServiceBus\";\n\ninterface ITodoListProps {\n  entries: any;\n  deleteItem: (key: any) => void;\n}\n\nclass TodoList extends Component<ITodoListProps, any> {\n  eventBus: ServiceBus;\n  /**\n   *\n   */\n  constructor(props: any) {\n    super(props);\n    this.eventBus = new ServiceBus();\n  }\n\n  createTasks = (item: ITodoItem) => {\n    return (\n      <div className=\"d-flex align-items-center\" key={item.key}>\n        <div className=\"\">\n          <img src={require(\"./gun.svg\")} className=\"bullet\" />\n        </div>\n        <div className=\"todo-text\">{item.text}</div>\n        <div className=\"ml-auto\">\n          <img\n            src={require(\"./cancel.svg\")}\n            className=\"svg\"\n            onClick={() =>\n              this.eventBus.dispatchEvent(TodoEventEnum.DeleteItem, item)\n            }\n          />\n        </div>\n      </div>\n    );\n  };\n  render() {\n    const todoEntries = this.props.entries;\n    const listItems = todoEntries.map(this.createTasks);\n\n    return <div>{listItems}</div>;\n  }\n}\n\nexport default TodoList;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}