{"version":3,"sources":["gun.svg","cancel.svg","TodoForm.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoForm","this","props","inputElement","current","focus","react_default","a","createElement","className","onSubmit","addItem","placeholder","ref","value","currentItem","text","onChange","handleInput","type","Component","TodoItems","createTasks","item","index","key","src","require","class","listItems","entries","map","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","React","createRef","e","target","Date","now","setState","preventDefault","newItem","state","items","concat","toConsumableArray","deleteItem","filteredItems","filter","src_TodoForm","src_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e40f7923.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gun.125549ee.svg\";","module.exports = __webpack_public_path__ + \"static/media/cancel.35a6ccb5.svg\";","import React, { Component } from \"react\";\n\nclass TodoForm extends Component {\n  componentDidUpdate() {\n    this.props.inputElement.current.focus();\n  }\n  render() {\n    return (\n      <div className=\"todoList\">\n        <div className=\"header\">\n          <form onSubmit={this.props.addItem}>\n            <div className=\"input-group input-group-sm mb-3\">\n              <div className=\"input-group-prepend\">\n              <input\n                className=\"form-control\"\n                placeholder=\"Task\"\n                ref={this.props.inputElement}\n                value={this.props.currentItem.text}\n                onChange={this.props.handleInput}\n              />\n              </div>              \n             \n              <button type=\"submit\" className=\"btn btn-primary\">\n                {\" \"}\n                Add Task{\" \"}\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default TodoForm;\n","import \"./TodoList.css\";\nimport React, { Component } from \"react\";\n\nclass TodoItems extends Component {\n  createTasks = (item, index) => {\n    return (\n      <div className=\"d-flex\" key={index}>\n        <div className=\"align-self-center\">\n          <img src={require(\"./gun.svg\")} className=\"bullet\" />\n        </div>\n        <div className=\"align-self-center\">{item.text}</div>\n        <div class=\"ml-auto\">\n          <img src={require(\"./cancel.svg\")} className=\"svg\" />\n        </div>\n      </div>\n    );\n  };\n  render() {\n    const todoEntries = this.props.entries;\n    const listItems = todoEntries.map(this.createTasks);\n\n    return <div>{listItems}</div>;\n  }\n}\n\nexport default TodoItems;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport TodoForm from \"./TodoForm\";\nimport TodoItems from \"./TodoList\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      items: [],\n      currentItem: { text: \"\", key: \"\" }\n    };\n  }\n  inputElement = React.createRef();\n  handleInput = e => {\n    const itemText = e.target.value;\n    const currentItem = { text: itemText, key: Date.now() };\n    this.setState({\n      currentItem\n    });\n  };\n  addItem = e => {\n    e.preventDefault();\n    const newItem = this.state.currentItem;\n    if (newItem.text !== \"\") {\n      const items = [...this.state.items, newItem];\n      this.setState({\n        items: items,\n        currentItem: { text: \"\", key: \"\" }\n      });\n    }\n  };\n  deleteItem = key => {\n    const filteredItems = this.state.items.filter(item => {\n      return item.key !== key;\n    });\n    this.setState({\n      items: filteredItems\n    });\n  };\n  render() {\n    return (\n      <div className=\"d-flex justify-content-center\">\n        <div className=\"d-flex flex-column\">\n          <div>\n            <TodoForm\n              addItem={this.addItem}\n              inputElement={this.inputElement}\n              handleInput={this.handleInput}\n              currentItem={this.state.currentItem}\n            />\n            <TodoItems\n              entries={this.state.items}\n              deleteItem={this.deleteItem}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('reactRoot'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}